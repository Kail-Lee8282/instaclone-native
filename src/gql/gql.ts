/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  fragment PhotoFragment on Photo {\n    id\n    file\n    likes\n    commentCount\n    isLiked\n  }\n": types.PhotoFragmentFragmentDoc,
    "\n  fragment CommentFragment on Comment {\n    id\n    payload\n    isMine\n    createAt\n    user {\n      userName\n      avatar\n    }\n  }\n": types.CommentFragmentFragmentDoc,
    "\n  fragment UserFragment on User {\n    id\n    userName\n    avatar\n    isFollowing\n    isMe\n  }\n": types.UserFragmentFragmentDoc,
    "\n  fragment FeedFragment on Photo {\n    ...PhotoFragment\n    user {\n      id\n      userName\n      avatar\n    }\n    caption\n    commentCount\n    createAt\n    isMine\n  }\n\n  \n": types.FeedFragmentFragmentDoc,
    "\n  fragment RoomParts on Room {\n    id\n    unReadTotal\n    users {\n      avatar\n      userName\n    }\n  }\n": types.RoomPartsFragmentDoc,
    "\n  mutation toggleLike($id: Int!) {\n    toggleLike(id: $id) {\n      ok\n      error\n    }\n  }\n": types.ToggleLikeDocument,
    "\n  query me {\n    me {\n      userName\n      avatar\n      totalFollowing\n      totalFollowers\n    }\n  }\n": types.MeDocument,
    "\n  query searchPhotos($keyword: String!) {\n    searchPhotos(keyword: $keyword) {\n      id\n      file\n    }\n  }\n": types.SearchPhotosDocument,
    "\n    mutation createAccount($firstName: String!, $userName: String!, $email: String!, $password: String!, $lastName: String) {\n    createAccount(firstName: $firstName, userName: $userName, email: $email, password: $password, lastName: $lastName) {\n      ok\n      id\n      error\n    }\n  }\n": types.CreateAccountDocument,
    "\n  query SeeFeed($offset: Int!) {\n    seeFeed(offset: $offset) {\n      ...PhotoFragment\n      user {\n        id\n        userName\n        avatar\n      }\n      caption\n      commentCount\n      createAt\n      isMine\n      comments {\n        ...CommentFragment\n      }\n    }\n  }\n  \n  \n": types.SeeFeedDocument,
    "\n  query seePhotoLikes($seePhotoLikesId: Int!) {\n    seePhotoLikes(id: $seePhotoLikesId) {\n      ...UserFragment\n    }\n  }  \n  \n": types.SeePhotoLikesDocument,
    "\n    mutation login($userName: String!, $password: String!) {\n        login(userName: $userName, password: $password) {\n            ok\n            token\n            error\n        }\n    }\n": types.LoginDocument,
    "\n  query seePhoto($id:Int!){\n    seePhoto(id:$id){\n        ...PhotoFragment\n      user {\n        id\n        userName\n        avatar\n      }\n      caption\n    }\n  }\n  \n": types.SeePhotoDocument,
    "\n    query seeRoom($id: Int!) {\n        seeRoom(id: $id) {\n            id\n            messages {\n                id\n                payload\n                user {\n                    userName\n                    avatar\n                    isMe\n                }\n                read\n            }\n        }\n    }\n": types.SeeRoomDocument,
    "\n  mutation sendMessage($payload: String!, $roomId: Int) {\n  sendMessage(payload: $payload, roomId: $roomId) {\n    ok\n    id\n    error\n  }\n}  \n": types.SendMessageDocument,
    "\n    subscription roomUpdates($id: Int!) {\n        roomUpdates(id: $id) {\n            id\n            payload\n            userId\n            read\n        }\n    }\n": types.RoomUpdatesDocument,
    "\n                            fragment NewMessage on Message{\n                                id\n                                payload\n                                user {\n                                    userName\n                                    avatar\n                                    isMe\n                                }\n                                read\n                            }\n                        ": types.NewMessageFragmentDoc,
    "\n    query seeRooms {\n        seeRooms {\n            ...RoomParts\n        }\n    }\n    \n": types.SeeRoomsDocument,
    "\n    mutation uploadPhoto($file: Upload!, $caption: String) {\n        uploadPhoto(file: $file, caption: $caption) {\n          ...FeedFragment\n        }\n    }\n    \n": types.UploadPhotoDocument,
};

export function graphql(source: "\n  fragment PhotoFragment on Photo {\n    id\n    file\n    likes\n    commentCount\n    isLiked\n  }\n"): (typeof documents)["\n  fragment PhotoFragment on Photo {\n    id\n    file\n    likes\n    commentCount\n    isLiked\n  }\n"];
export function graphql(source: "\n  fragment CommentFragment on Comment {\n    id\n    payload\n    isMine\n    createAt\n    user {\n      userName\n      avatar\n    }\n  }\n"): (typeof documents)["\n  fragment CommentFragment on Comment {\n    id\n    payload\n    isMine\n    createAt\n    user {\n      userName\n      avatar\n    }\n  }\n"];
export function graphql(source: "\n  fragment UserFragment on User {\n    id\n    userName\n    avatar\n    isFollowing\n    isMe\n  }\n"): (typeof documents)["\n  fragment UserFragment on User {\n    id\n    userName\n    avatar\n    isFollowing\n    isMe\n  }\n"];
export function graphql(source: "\n  fragment FeedFragment on Photo {\n    ...PhotoFragment\n    user {\n      id\n      userName\n      avatar\n    }\n    caption\n    commentCount\n    createAt\n    isMine\n  }\n\n  \n"): (typeof documents)["\n  fragment FeedFragment on Photo {\n    ...PhotoFragment\n    user {\n      id\n      userName\n      avatar\n    }\n    caption\n    commentCount\n    createAt\n    isMine\n  }\n\n  \n"];
export function graphql(source: "\n  fragment RoomParts on Room {\n    id\n    unReadTotal\n    users {\n      avatar\n      userName\n    }\n  }\n"): (typeof documents)["\n  fragment RoomParts on Room {\n    id\n    unReadTotal\n    users {\n      avatar\n      userName\n    }\n  }\n"];
export function graphql(source: "\n  mutation toggleLike($id: Int!) {\n    toggleLike(id: $id) {\n      ok\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation toggleLike($id: Int!) {\n    toggleLike(id: $id) {\n      ok\n      error\n    }\n  }\n"];
export function graphql(source: "\n  query me {\n    me {\n      userName\n      avatar\n      totalFollowing\n      totalFollowers\n    }\n  }\n"): (typeof documents)["\n  query me {\n    me {\n      userName\n      avatar\n      totalFollowing\n      totalFollowers\n    }\n  }\n"];
export function graphql(source: "\n  query searchPhotos($keyword: String!) {\n    searchPhotos(keyword: $keyword) {\n      id\n      file\n    }\n  }\n"): (typeof documents)["\n  query searchPhotos($keyword: String!) {\n    searchPhotos(keyword: $keyword) {\n      id\n      file\n    }\n  }\n"];
export function graphql(source: "\n    mutation createAccount($firstName: String!, $userName: String!, $email: String!, $password: String!, $lastName: String) {\n    createAccount(firstName: $firstName, userName: $userName, email: $email, password: $password, lastName: $lastName) {\n      ok\n      id\n      error\n    }\n  }\n"): (typeof documents)["\n    mutation createAccount($firstName: String!, $userName: String!, $email: String!, $password: String!, $lastName: String) {\n    createAccount(firstName: $firstName, userName: $userName, email: $email, password: $password, lastName: $lastName) {\n      ok\n      id\n      error\n    }\n  }\n"];
export function graphql(source: "\n  query SeeFeed($offset: Int!) {\n    seeFeed(offset: $offset) {\n      ...PhotoFragment\n      user {\n        id\n        userName\n        avatar\n      }\n      caption\n      commentCount\n      createAt\n      isMine\n      comments {\n        ...CommentFragment\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query SeeFeed($offset: Int!) {\n    seeFeed(offset: $offset) {\n      ...PhotoFragment\n      user {\n        id\n        userName\n        avatar\n      }\n      caption\n      commentCount\n      createAt\n      isMine\n      comments {\n        ...CommentFragment\n      }\n    }\n  }\n  \n  \n"];
export function graphql(source: "\n  query seePhotoLikes($seePhotoLikesId: Int!) {\n    seePhotoLikes(id: $seePhotoLikesId) {\n      ...UserFragment\n    }\n  }  \n  \n"): (typeof documents)["\n  query seePhotoLikes($seePhotoLikesId: Int!) {\n    seePhotoLikes(id: $seePhotoLikesId) {\n      ...UserFragment\n    }\n  }  \n  \n"];
export function graphql(source: "\n    mutation login($userName: String!, $password: String!) {\n        login(userName: $userName, password: $password) {\n            ok\n            token\n            error\n        }\n    }\n"): (typeof documents)["\n    mutation login($userName: String!, $password: String!) {\n        login(userName: $userName, password: $password) {\n            ok\n            token\n            error\n        }\n    }\n"];
export function graphql(source: "\n  query seePhoto($id:Int!){\n    seePhoto(id:$id){\n        ...PhotoFragment\n      user {\n        id\n        userName\n        avatar\n      }\n      caption\n    }\n  }\n  \n"): (typeof documents)["\n  query seePhoto($id:Int!){\n    seePhoto(id:$id){\n        ...PhotoFragment\n      user {\n        id\n        userName\n        avatar\n      }\n      caption\n    }\n  }\n  \n"];
export function graphql(source: "\n    query seeRoom($id: Int!) {\n        seeRoom(id: $id) {\n            id\n            messages {\n                id\n                payload\n                user {\n                    userName\n                    avatar\n                    isMe\n                }\n                read\n            }\n        }\n    }\n"): (typeof documents)["\n    query seeRoom($id: Int!) {\n        seeRoom(id: $id) {\n            id\n            messages {\n                id\n                payload\n                user {\n                    userName\n                    avatar\n                    isMe\n                }\n                read\n            }\n        }\n    }\n"];
export function graphql(source: "\n  mutation sendMessage($payload: String!, $roomId: Int) {\n  sendMessage(payload: $payload, roomId: $roomId) {\n    ok\n    id\n    error\n  }\n}  \n"): (typeof documents)["\n  mutation sendMessage($payload: String!, $roomId: Int) {\n  sendMessage(payload: $payload, roomId: $roomId) {\n    ok\n    id\n    error\n  }\n}  \n"];
export function graphql(source: "\n    subscription roomUpdates($id: Int!) {\n        roomUpdates(id: $id) {\n            id\n            payload\n            userId\n            read\n        }\n    }\n"): (typeof documents)["\n    subscription roomUpdates($id: Int!) {\n        roomUpdates(id: $id) {\n            id\n            payload\n            userId\n            read\n        }\n    }\n"];
export function graphql(source: "\n                            fragment NewMessage on Message{\n                                id\n                                payload\n                                user {\n                                    userName\n                                    avatar\n                                    isMe\n                                }\n                                read\n                            }\n                        "): (typeof documents)["\n                            fragment NewMessage on Message{\n                                id\n                                payload\n                                user {\n                                    userName\n                                    avatar\n                                    isMe\n                                }\n                                read\n                            }\n                        "];
export function graphql(source: "\n    query seeRooms {\n        seeRooms {\n            ...RoomParts\n        }\n    }\n    \n"): (typeof documents)["\n    query seeRooms {\n        seeRooms {\n            ...RoomParts\n        }\n    }\n    \n"];
export function graphql(source: "\n    mutation uploadPhoto($file: Upload!, $caption: String) {\n        uploadPhoto(file: $file, caption: $caption) {\n          ...FeedFragment\n        }\n    }\n    \n"): (typeof documents)["\n    mutation uploadPhoto($file: Upload!, $caption: String) {\n        uploadPhoto(file: $file, caption: $caption) {\n          ...FeedFragment\n        }\n    }\n    \n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;